{"version":3,"sources":["../src/pix.js"],"names":["QRCode","require","CRC","pad","removeAccent","setConfigs","params","txId","key","name","amount","city","zipcode","description","isUnique","id","required","value","sanitize","children","sanitizeKey","String","substr","trim","Number","parseFloat","toFixed","replace","validation","length","Error","test","getLength","text","getString","options","reduce","accu","curr","getKeyType","pixKey","regexes","email","phone","cpf","cnpj","random","match","Object","keys","find","sanitizable","rgx","sanitizableKeys","keyType","includes","getCRC","code","pix","error","console","log","message","qrcode","payload","toDataURL","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nconst QRCode = require('qrcode');\n\nconst { CRC } = require('../dist/crc');\nconst { pad, removeAccent } = require('../dist/utils');\n\n/**\n * Recebe os dados do pix e devolve um objeto de configurações que será usado pela\n * biblioteca para geração do código seguindo os padrões definidos pelo BCB.\n *\n * @param {Object} params Parâmetros de configuração da venda\n *              {String}  key         : Chave pix do recebedor\n *              {String}  txId        : ID da Transação\n *              {Number}  amount      : Valor da compra\n *              {String}  name        : Nome do comprador\n *              {String}  city        : Cidade da compra\n *              {Integer} zipcode     : CEP da cidade\n *              {String}  description : Descrição da transação\n *              {Boolean} isUnique    : Define se é uma transação única\n * @returns {Object} Objeto com as configurações\n */\nconst setConfigs = (params = {}) => {\n  //\n  const {\n    txId = null,\n    key = null,\n    name = null,\n    amount = null,\n    city = null,\n    zipcode = null,\n    description = null,\n    isUnique = false,\n  } = params;\n\n  return [\n    {\n      id: 0,\n      required: true,\n      name: 'Payload format indicator',\n      value: '01',\n    },\n\n    {\n      id: 1,\n      required: false,\n      name: 'Point of Initiation Method',\n      value: isUnique,\n      sanitize: (value) => (value ? '12' : ''),\n    },\n\n    {\n      id: 26,\n      required: true,\n      name: 'Merchant Account Information',\n      children: [\n        {\n          id: 0,\n          required: true,\n          name: 'GUI',\n          value: 'BR.GOV.BCB.PIX',\n        },\n        {\n          id: 1,\n          required: true,\n          name: 'PIX Key',\n          value: key,\n          sanitize: (value) => sanitizeKey(value),\n        },\n        {\n          id: 2,\n          required: false,\n          name: 'Transaction Description',\n          value: description,\n          sanitize: (value) => (!value ? '' : String(value).substr(0, 25).trim()),\n        },\n      ],\n    },\n\n    {\n      id: 52,\n      required: true,\n      name: 'Merchant Category Code',\n      value: '0000',\n    },\n\n    {\n      id: 53,\n      required: true,\n      name: 'Transaction Currency',\n      value: '986', // \"986\" – BRL: real brasileiro - ISO4217\n    },\n\n    {\n      id: 54,\n      required: false,\n      name: 'Transaction Amount',\n      value: amount, // Valor em inteiro\n      sanitize: (value) => (!value ? '' : Number.parseFloat(value).toFixed(2)),\n    },\n\n    {\n      id: 58,\n      required: true,\n      name: 'Country Code',\n      value: 'BR',\n    },\n\n    {\n      id: 59,\n      required: true,\n      name: 'Merchant Name',\n      value: name,\n      sanitize: (value) => String(value).substr(0, 25).trim(),\n    },\n\n    {\n      id: 60,\n      required: true,\n      name: 'Merchant City',\n      value: city,\n      sanitize: (value) => String(value).substr(0, 15).trim(),\n    },\n\n    {\n      id: 61,\n      required: false,\n      name: 'Postal Code',\n      value: zipcode,\n      sanitize: (value) => String(value)\n        .replace(/[^0-9]+/g, '')\n        .substr(0, 15)\n        .trim(),\n    },\n\n    {\n      id: 62,\n      required: true,\n      name: 'Aditional Data Field Template',\n      children: [\n        {\n          id: 5,\n          required: true,\n          name: 'Reference Label',\n          value: txId,\n          validation: (value) => {\n            if (String(value).length > 25) throw new Error('txId não pode ter mais de 25 caracteres');\n\n            if (/[^0-9a-z]+/i.test(value)) throw new Error('txId só permite letras e números');\n\n            return true;\n          },\n        },\n\n        {\n          id: 50,\n          required: true,\n          name: 'Payment System specific template',\n          children: [\n            {\n              id: 0,\n              name: 'Globally Unique Identifier',\n              value: 'BR.GOV.BCB.BRCODE',\n            },\n\n            {\n              id: 1,\n              name: 'Payment System specific',\n              value: '1.0.0',\n            },\n\n          ],\n        },\n      ],\n    },\n  ];\n};\n\n/**\n * Retorna o número de caracteres de um valor como string\n * com um número definido de caracteres.\n *\n * @example\n * getLength('Claudio', 3)\n * // -> '007'\n *\n * @param {String}  text  Valor\n * @param {Integer} length Número de caracteres\n */\nfunction getLength(text, length = 2) {\n  return pad(text.length, length);\n}\n\n/**\n * Cria um trecho do código a partir das configurações definidas\n *\n * @param {Object} options  Opções de configuração\n *          {Integer} id      : Id do trecho do pix\n *          {String}  name    : Nome do trecho. Somente para referência\n *          {String}  value   : Valor que o trecho terá\n *          {String}  children: Array de objetos contendo as mesmas opções deste objeto options\n *          {String}  sanitize: Função que retornará o valor deste trecho.\n *                              Ex.: Converte para float de 2 dígitos, limita um tamanho etc.\n *          {Boolean} required: True/False para determinar se este trecho deve ser obrigatório\n *\n * @returns {String} Trecho padronizado para ser adicionado ao pix\n */\nconst getString = (options = {}) => {\n  //\n  let {\n    id,\n    value,\n  } = options;\n\n  const {\n    name,\n    children,\n    sanitize,\n    validation,\n    required = false,\n  } = options;\n\n  // Sanitiza o valor, caso exista uma função para isso\n  if (sanitize) value = sanitize(value);\n\n  // É obrigatório mas não tem value nem children definido\n  if (required && !value && !children) {\n    throw new Error(`\"${name}\" is required`);\n  }\n\n  // Não é obrigatório, não tem value nem children definido\n  if (!required && !value && !children) return '';\n\n  // Valida, caso exista uma validação\n  if (validation) validation(value);\n\n  // Retira os caracteres especiais\n  if (value) value = removeAccent(value);\n\n  // Transforma o id em uma string com 2 caracteres\n  id = pad(id, 2);\n\n  // Se tiver um children, processe seu conteúdo antes de gerar o valor atual\n  if (children) value = children.reduce((accu, curr) => accu + getString(curr), '');\n\n  // Devolva id com 2 caractes, o tamanho com 2 caracteres e o valor\n  return `${id}${getLength(value)}${value}`;\n};\n\n/**\n * Devolve o tipo da chave informada\n *\n * getKeyType('170.803.140-54'); // -> 'cpf'\n * getKeyType('170803140-54'); // -> 'cpf'\n * getKeyType('17080314054'); // -> 'cpf'\n * getKeyType('38.262.543/0001-50'); // -> 'cnpj'\n * getKeyType('382625430001-50'); // -> 'cnpj'\n * getKeyType('38262543000150'); // -> 'cnpj'\n * getKeyType('klawdyo@gmail.com'); // -> 'email'\n * getKeyType('+5584996964567'); // -> 'phone'\n * getKeyType('+55 (84) 9 9696-4567'); // -> 'phone'\n * getKeyType('+5584996964567'); // -> 'phone'\n * getKeyType('3066362f-020c-4b46-9c1b-4ee3cf8a1bcc'); // -> 'random'\n *\n * @param {String} pixKey Chave\n * @returns {String} Um do resultados: cpf, cnpj, email, phone, random\n */\nfunction getKeyType(pixKey) {\n  const regexes = {\n    email: /@/,\n    phone: /^\\+/,\n    cpf: /^(\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2})$/,\n    cnpj: /^(\\d{2}\\.?\\d{3}\\.?\\d{3}\\/?\\d{4}-?\\d{2})$/,\n    random:\n      /^[0-9a-f]{4,}-[0-9a-f]{4,}-[0-9a-f]{4,}-[0-9a-f]{4,}-[0-9a-f]{4,}$/,\n  };\n\n  const match = Object.keys(regexes).find((key) => regexes[key].test(pixKey));\n\n  return match;\n}\n\n/**\n * Devolve o tipo da chave informada\n *\n * sanitizeKey('170.803.140-54'); // -> '17080314054'\n * sanitizeKey('170803140-54'); // -> '17080314054'\n * sanitizeKey('17080314054'); // -> '17080314054'\n * sanitizeKey('38.262.543/0001-50'); // -> '38262543000150'\n * sanitizeKey('382625430001-50'); // -> '38262543000150'\n * sanitizeKey('38262543000150'); // -> '38262543000150'\n * sanitizeKey('klawdyo@gmail.com'); // -> 'klawdyo@gmail.com'\n * sanitizeKey('+5584996964567'); // -> '+5584996964567'\n * sanitizeKey('+55 (84) 9 9696-4567'); // -> '+5584996964567'\n * sanitizeKey('+5584996964567'); // -> '+5584996964567'\n * sanitizeKey('3066362f-020c-4b46-9c1b-4ee3cf8a1bcc'); // -> '3066362f-020c-4b46-9c1b-4ee3cf8a1bcc'\n *\n * @param {String} pixKey Chave\n * @returns {String} Um do resultados: cpf, cnpj, email, phone, random\n */\nfunction sanitizeKey(pixKey) {\n  const sanitizable = {\n    cpf: { rgx: /[^0-9]+/g, replace: '' },\n    cnpj: { rgx: /[^0-9]+/g, replace: '' },\n    phone: { rgx: /[^+0-9]+/g, replace: '' },\n  };\n  const sanitizableKeys = Object.keys(sanitizable);\n  const keyType = getKeyType(pixKey);\n\n  return sanitizableKeys.includes(keyType)\n    ? String(pixKey).replace(sanitizable[keyType].rgx, sanitizable[keyType].replace)\n    : pixKey;\n}\n\n/**\n * CRC16 é o último trecho do código. É usado para validar o código anterior.\n *\n * @param {String} code  Código do pix copia e cola\n * @returns {String} Trecho de validação do pix\n */\nconst getCRC = (code) => getString({\n  id: 63,\n  // O código CRC gerado terá 4 caracteres e o ID é 63.\n  // Para a geração correta do código, é nenecessário utilizar o \"6304\" que\n  // seria adicionado naturalmente por getString()\n  value: CRC(`${code}6304`),\n});\n\n/**\n * Gera o código do pix copia e cola\n *\n * @param {Object} params Parâmetros de configuração da venda\n *              {String}  key        : Chave pix do recebedor\n *              {String}  txId       : ID da Transação\n *              {Number}  amount     : Valor da compra\n *              {String}  name       : Nome do comprador\n *              {String}  city       : Cidade da compra\n *              {Integer} zipcode    : CEP da cidade\n *              {String}  description: Descrição da transação\n *              {Boolean} isUnique  : Define se é uma transação única\n * @returns {String} String do pix copia e cola para as configurações definidas.\n */\nconst pix = ({\n  name, amount, zipcode, city, txId, key, description, isUnique,\n}) => {\n  try {\n    const code = setConfigs({\n      key, name, amount, zipcode, city, txId, description, isUnique,\n    })\n      .reduce((accu, curr) => accu + getString(curr), '');\n\n    return code + getCRC(code);\n  } catch (error) {\n    console.log(error.message);\n    return null;\n  }\n};\n\n/**\n * Retorna o base64 da imagem\n *\n * @param {Object} payload\n * @return {String} Código base64 da imagem\n */\nconst qrcode = async (payload) => {\n  const code = pix(payload);\n  return QRCode.toDataURL(code);\n};\n\nmodule.exports = {\n  pix,\n  qrcode,\n  getKeyType,\n  sanitizeKey,\n};\n"],"file":"pix.js"}