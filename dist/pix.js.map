{"version":3,"sources":["../src/pix.js"],"names":["QRCode","require","CRC","pad","removeAccent","setConfigs","params","txId","key","name","amount","city","zipcode","id","required","value","children","sanitize","Number","parseFloat","toFixed","String","substr","trim","replace","validation","length","Error","getString","options","reduce","accu","curr","getLength","getCRC","code","pix","qrcode","payload","toDataURL","console","error","text","module","exports"],"mappings":"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","sourcesContent":["var QRCode = require('qrcode')\n\nconst { CRC } = require('../dist/crc');\nconst { pad, removeAccent } = require('../dist/utils');\n\n/**\n * Recebe os dados do pix e devolve um objeto de configurações que será usado pela\n * biblioteca para geração do código seguindo os padrões definidos pelo BCB.\n * \n * @param {Object} params Parâmetros de configuração da venda\n *              {String} key    : Chave pix do recebedor\n *              {String} txId   : ID da Transação  \n *              {Number} amount : Valor da compra\n *              {String} name   : Nome do comprador\n *              {String} city   : Cidade da compra\n *              {Integer}zipcode: CEP da cidade\n * \n * @returns \n */\nconst setConfigs = (params = {}) => {\n  //\n  const {\n    txId = null,\n    key = null,\n    name = null,\n    amount = null,\n    city = null,\n    zipcode = null,\n  } = params;\n\n  return [\n    {\n      id: 0,\n      required: true,\n      name: 'Payload format indicator',\n      value: '01',\n    },\n\n    {\n      id: 1,\n      required: false,\n      name: 'Point of Initiation Method',\n      value: '12',\n    },\n\n    {\n      id: 26,\n      required: true,\n      name: 'Merchant Account Information',\n      children: [\n        {\n          id: 0,\n          required: true,\n          name: 'GUI',\n          value: 'BR.GOV.BCB.PIX',\n        },\n        {\n          id: 1,\n          required: true,\n          name: 'PIX Key',\n          value: key,\n        },\n      ],\n    },\n\n    {\n      id: 52,\n      required: true,\n      name: 'Merchant Category Code',\n      value: '0000',\n    },\n\n    {\n      id: 53,\n      required: true,\n      name: 'Transaction Currency',\n      value: '986', // “986” – BRL: real brasileiro - ISO4217\n    },\n\n    {\n      id: 54,\n      required: false,\n      name: 'Transaction Amount',\n      value: amount, // Valor em inteiro\n      sanitize: (value) => Number.parseFloat(value).toFixed(2),\n    },\n\n    {\n      id: 58,\n      required: true,\n      name: 'Country Code',\n      value: 'BR',\n    },\n\n    {\n      id: 59,\n      required: true,\n      name: 'Merchant Name',\n      value: name,\n      sanitize: (value) => String(value).substr(0, 25).trim(),\n    },\n\n    {\n      id: 60,\n      required: true,\n      name: 'Merchant City',\n      value: city,\n      sanitize: (value) => String(value).substr(0, 15).trim(),\n    },\n\n    {\n      id: 61,\n      required: false,\n      name: 'Postal Code',\n      value: zipcode,\n      sanitize: (value) =>\n        String(value)\n          .replace(/[^0-9]+/g, '')\n          .substr(0, 15)\n          .trim(),\n    },\n\n    {\n      id: 62,\n      required: false,\n      name: 'Aditional Data Field Template',\n      children: [\n        {\n          id: 5,\n          required: false,\n          name: 'Reference Label',\n          validation: value => {\n            if (String(value).length > 25)\n              throw new Error('txId não pode ter mais de 25 caracteres')\n            else return true\n          },\n          value: txId,\n        },\n      ],\n    },\n  ];\n};\n\n/**\n * Cria um trecho do código a partir das configurações definidas\n * \n * @param {Object} options  Opções de configuração\n *          {Integer} id      : Id do trecho do pix\n *          {String}  name    : Nome do trecho. Somente para referência\n *          {String}  value   : Valor que o trecho terá\n *          {String}  children: Array de objetos contendo as mesmas opções deste objeto options\n *          {String}  sanitize: Função que retornará o valor deste trecho. Ex.: Converte para float de 2 dígitos, limita um tamanho etc.\n *          {Boolean} required: True/False para determinar se este trecho deve ser obrigatório\n *\n * @returns {String} Trecho padronizado para ser adicionado ao pix\n */\nconst getString = (options = {}) => {\n  // \n  let {\n    id,\n    name,\n    value,\n    children,\n    sanitize,\n    validation,\n    required = false,\n  } = options;\n\n  // É obrigatório mas não tem value nem children definido\n  if (required && !value && !children) {\n    throw new Error(`\"${name}\" is required`);\n  }\n\n  // Não é obrigatório, não tem value nem children definido\n  if (!required && !value && !children) return '';\n\n  // Valida, caso exista uma validação\n  if (validation) validation(value)\n\n  // Retira os caracteres especiais\n  if (value) value = removeAccent(value);\n\n  // Sanitiza o valor, caso exista uma função para isso\n  if (sanitize) value = sanitize(value);\n\n  // Transforma o id em uma string com 2 caracteres\n  id = pad(id, 2);\n\n  // Se tiver um children, processe seu conteúdo antes de gerar o valor atual\n  if (children)\n    value = children.reduce((accu, curr) => accu + getString(curr), '');\n\n  // Devolva id com 2 caractes, o tamanho com 2 caracteres e o valor\n  return `${id}${getLength(value)}${value}`;\n};\n\n/**\n * CRC16 é o último trecho do código. É usado para validar o código anterior.\n * \n * @param {String} code  Código do pix copia e cola\n * @returns {String} Trecho de validação do pix\n */\nconst getCRC = code => getString({\n  id: 63,\n  // O código CRC gerado terá 4 caracteres e o ID é 63. \n  // Para a geração correta do código, é nenecessário utilizar o \"6304\" que \n  // seria adicionado naturalmente por getString()\n  value: CRC(code + '6304')\n})\n\n/**\n * Gera o código do pix copia e cola\n * \n * @param {Object} params Parâmetros de configuração da venda\n *              {String} key    : Chave pix do recebedor\n *              {String} txId   : ID da Transação\n *              {Number} amount : Valor da compra\n *              {String} name   : Nome do comprador\n *              {String} city   : Cidade da compra\n *              {Integer}zipcode: CEP da cidade\n * @returns {String} String do pix copia e cola para as configurações definidas.\n */\nconst pix = ({ name, amount, zipcode, city, txId, key }) => {\n  const code = setConfigs({ key, name, amount, zipcode, city, txId })\n    .reduce((accu, curr) => accu + getString(curr), '')\n\n  // console.log(code, CRC(code))\n\n  return code + getCRC(code);\n};\n\n/**\n * Retorna o base64 da imagem\n * \n * @param {Object} payload \n * @return {String} Código base64 da imagem\n */\nconst qrcode = async (payload) => {\n  try {\n    const code = pix(payload);\n    return QRCode.toDataURL(code);\n  } catch (err) {\n    console.error(err)\n  }\n}\n\n/**\n * Retorna o número de caracteres de um valor como string\n * com um número definido de caracteres. \n * \n * @example\n * getLength('Claudio', 3)\n * // -> '007'\n * \n * @param {String}  text  Valor\n * @param {Integer} length Número de caracteres\n */\nfunction getLength(text, length = 2) {\n  return pad(text.length, length);\n};\n\nmodule.exports = {\n  pix,\n  qrcode,\n}\n"],"file":"pix.js"}